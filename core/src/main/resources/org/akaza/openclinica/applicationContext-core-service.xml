<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


    <!--  Service layer supports legacy DAOs via constructor injection of dataSource 
          and Hibernate DAO injection via autowiring -->
          
	
    <bean id="dynamicsMetadataService" class="org.akaza.openclinica.service.crfdata.DynamicsMetadataService" autowire="byName">
        <constructor-arg ref="dataSource"/>
    </bean>      
    <bean id="ruleSetService" class="org.akaza.openclinica.service.rule.RuleSetService" autowire="byName">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="rulesPostImportContainerService" class="org.akaza.openclinica.service.rule.RulesPostImportContainerService" autowire="byName">
        <constructor-arg ref="dataSource"/>
    </bean>
    <bean id="subjectService" class="org.akaza.openclinica.service.subject.SubjectService">
        <constructor-arg ref="dataSource"/>
    </bean>
    <bean id="eventService" class="org.akaza.openclinica.service.EventService">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="insertActionValidator" class="org.akaza.openclinica.validator.rule.action.InsertActionValidator">
        <constructor-arg ref="dataSource"/>
    </bean>
    
    <bean id="simpleConditionalDisplayService" class="org.akaza.openclinica.service.crfdata.SimpleConditionalDisplayService" autowire="byName">
        <constructor-arg ref="dataSource"/>
    </bean>
    
    <bean id="studyEventDao" class="org.akaza.openclinica.dao.managestudy.StudyEventDAO">
        <constructor-arg ref="dataSource"/>
    </bean>
    
    <bean id="studyDao" class="org.akaza.openclinica.dao.managestudy.StudyDAO">
        <constructor-arg ref="dataSource"/>
    </bean>
    
    <bean id="studyEventDefinitionDao" class="org.akaza.openclinica.dao.managestudy.StudyEventDefinitionDAO">
        <constructor-arg ref="dataSource"/>
    </bean>
    
    <bean id="eventDefinitionCrfDao" class="org.akaza.openclinica.dao.managestudy.EventDefinitionCRFDAO">
        <constructor-arg ref="dataSource"/>
    </bean>
    
    <bean id="eventCrfDao" class="org.akaza.openclinica.dao.submit.EventCRFDAO">
        <constructor-arg ref="dataSource"/>
    </bean>
    
    <bean id="crfDao" class="org.akaza.openclinica.dao.admin.CRFDAO">
        <constructor-arg ref="dataSource"/>
    </bean>
    
    <bean id="crfVersionDao" class="org.akaza.openclinica.dao.submit.CRFVersionDAO">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="studySubjectService" class="org.akaza.openclinica.service.managestudy.StudySubjectServiceImpl">
        <property name="studyDao" ref="studyDao"/>
        <property name="studyEventDao" ref="studyEventDao"/>
        <property name="studyEventDefinitionDao" ref="studyEventDefinitionDao"/>
        <property name="eventDefinitionCrfDao" ref="eventDefinitionCrfDao"/>
        <property name="eventCrfDao" ref="eventCrfDao"/>
        <property name="crfDao" ref="crfDao"/>
        <property name="crfVersionDao" ref="crfVersionDao"/>
    </bean> 
   <!-- 
    <bean id="sdvUtil" class="org.akaza.openclinica.web.table.sdv.SDVUtil"  name="sdvUtil">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    
    <bean id="databaseCctsService" class="org.akaza.openclinica.ws.logic.DatabaseCctsService">
        <property name="subjectService" ref="subjectService"/>
        <property name="waitBeforeCommit" value="s[ccts.waitBeforeCommit]"/>
    </bean>
     -->
</beans>
