<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9 http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">

     <changeSet author="drodrigues" id="2012-03-28-13351-1" dbms="postgresql">
        <comment>Indexes for the tables used in the view_discrepancy_notes query.</comment>
        <sql splitStatements="false">
<![CDATA[
create index discrepancy_note_idx_entity_type on discrepancy_note(entity_type);
create index discrepancy_note_idx_parent on discrepancy_note(discrepancy_note_id) where ((parent_dn_id is null) or (parent_dn_id = 0));
create index study_subject_idx_study on study_subject(study_id);
create index event_definition_crf_idx_study_event_definition on event_definition_crf(study_event_definition_id);
create index study_event_idx_study_event_definition on study_event(study_event_definition_id);
create index event_definition_crf_idx_crf on event_definition_crf(crf_id);
create index crf_version_idx_crf on crf_version(crf_id);
create index event_definition_crf_idx_parent_null on event_definition_crf(parent_id) where (parent_id is null);
create index event_definition_crf_idx_parent_zero on event_definition_crf(parent_id) where (parent_id is not null or parent_id <> 0);
]]>
        </sql>
    </changeSet>

     <changeSet author="drodrigues" id="2012-03-28-13351-2" dbms="postgresql">
        <comment>Replacing 'view_dn_stats'.</comment>
        <sql splitStatements="false">
<![CDATA[
create or replace view "view_dn_stats" as select 
dn.discrepancy_note_id, 
case 
    when dn.resolution_status_id = 1 or dn.resolution_status_id = 2 or dn.resolution_status_id = 3 then (current_date - dn.date_created)
    when dn.resolution_status_id = 4 then (totals.date_updated - dn.date_created)
    else null
end as "days",
case
    when dn.resolution_status_id = 1 or dn.resolution_status_id = 2 or dn.resolution_status_id = 3 then (current_date - totals.date_updated)
    else null
end as "age",
totals.total_notes,
dn.date_created,
totals.date_updated
from discrepancy_note dn,
(
    select dn1.parent_dn_id, max(dn1.date_created) as "date_updated", count(dn1.discrepancy_note_id) as "total_notes" from discrepancy_note dn1 group by dn1.parent_dn_id
) as "totals"
where 
(dn.parent_dn_id is null or dn.parent_dn_id = 0)
and dn.discrepancy_note_id = totals.parent_dn_id;
]]>
        </sql>
    </changeSet>

     <changeSet author="drodrigues" id="2012-03-28-13351-3" dbms="postgresql">
        <comment>Removed legacy versions of views.</comment>
        <sql splitStatements="false">
<![CDATA[
drop view if exists view_discrepancy_note;
drop view if exists view_dn_item_data;
drop view if exists view_dn_event_crf;
drop view if exists view_dn_study_event;
drop view if exists view_dn_study_subject;
drop view if exists view_dn_subject;
drop view if exists view_hidden_event_definition_crf;
]]>
        </sql>
    </changeSet>

     <changeSet author="drodrigues" id="2012-03-28-13351-4" dbms="postgresql">
        <comment>Created view_study_hidden_event_definition_crf.</comment>
        <sql splitStatements="false">
<![CDATA[
create or replace view view_study_hidden_event_definition_crf as
SELECT EDC.event_definition_crf_id, edc.hide_crf, edc.study_id, se.study_event_id, cv.crf_version_id
FROM EVENT_DEFINITION_CRF EDC, STUDY_EVENT SE, CRF_VERSION CV
WHERE EDC.study_event_definition_id=SE.study_event_definition_id
AND EDC.crf_id = CV.crf_id
AND EDC.parent_id is null;
]]>
        </sql>
    </changeSet>

     <changeSet author="drodrigues" id="2012-03-28-13351-5" dbms="postgresql">
        <comment>Created view_site_hidden_event_definition_crf.</comment>
        <sql splitStatements="false">
<![CDATA[
create or replace view view_site_hidden_event_definition_crf as
SELECT EDC.event_definition_crf_id, edc.hide_crf, edc.study_id, se.study_event_id, cv.crf_version_id
FROM EVENT_DEFINITION_CRF EDC, STUDY_EVENT SE, CRF_VERSION CV
WHERE EDC.study_event_definition_id=SE.study_event_definition_id
AND EDC.crf_id = CV.crf_id
AND EDC.event_definition_crf_id not in
(select parent_id from event_definition_crf where parent_id is not null or parent_id <> 0);
]]>
        </sql>
    </changeSet>

     <changeSet author="drodrigues" id="2012-03-28-13351-6" dbms="postgresql">
        <comment>Replacing view_dn_item_data that now depends on new views.</comment>
        <sql splitStatements="false">
<![CDATA[
create or replace view view_dn_item_data as select 
s.study_id, 
s.parent_study_id, 
vhstudy.hide_crf as "study_hide_crf",
vhsite.hide_crf as "site_hide_crf",
dn.discrepancy_note_id, 
ss.label, 
ss.status_id as "ss_status_id",
dn.discrepancy_note_type_id,
dn.resolution_status_id, 
s.unique_identifier as "site_id", 
ds.date_created,
ds.date_updated,
ds.days, 
ds.age, 
sed.name as "event_name", 
se.date_start, 
c.name as "crf_name", 
ec.status_id, 
i.name as "entity_name", 
id.value, 
dn.entity_type, 
dn.description, 
dn.detailed_notes, 
ds.total_notes,
ua.first_name, 
ua.last_name, 
ua.user_name,
ua2.first_name as "owner_first_name", 
ua2.last_name as "owner_last_name", 
ua2.user_name as "owner_user_name"
from discrepancy_note dn left outer join user_account ua on (
    dn.assigned_user_id = ua.user_id
), user_account ua2, dn_item_data_map map, study_subject ss, study s, item_data id, item i, event_crf ec, study_event se, study_event_definition sed, crf_version cv, crf c, view_study_hidden_event_definition_crf vhstudy, view_site_hidden_event_definition_crf vhsite, view_dn_stats ds
where
dn.entity_type = 'itemData'
and dn.owner_id = ua2.user_id
and dn.discrepancy_note_id = map.discrepancy_note_id
and map.study_subject_id = ss.study_subject_id
and map.item_data_id = id.item_data_id
and dn.discrepancy_note_id = ds.discrepancy_note_id
and id.item_id = i.item_id
and id.event_crf_id = ec.event_crf_id
and ec.study_event_id = se.study_event_id
and se.study_event_definition_id = sed.study_event_definition_id
and ec.crf_version_id = cv.crf_version_id
and cv.crf_id = c.crf_id
and ss.study_id = s.study_id
and ((dn.parent_dn_id is null) or (dn.parent_dn_id = 0))
and vhstudy.study_event_id = se.study_event_id
and vhstudy.crf_version_id = cv.crf_version_id 
and vhsite.study_event_id = se.study_event_id
and vhsite.crf_version_id = cv.crf_version_id;
]]>
        </sql>
    </changeSet>

     <changeSet author="drodrigues" id="2012-03-28-13351-7" dbms="postgresql">
        <comment>Replacing view_dn_event_crf that now depends on new views.</comment>
        <sql splitStatements="false">
<![CDATA[
create or replace view view_dn_event_crf as 
select 
s.study_id, 
s.parent_study_id, 
vhstudy.hide_crf as "study_hide_crf", 
vhsite.hide_crf as "site_hide_crf",
dn.discrepancy_note_id, 
ss.label, 
ss.status_id as "ss_status_id",
dn.discrepancy_note_type_id,
dn.resolution_status_id, 
s.unique_identifier as "site_id", 
ds.date_created,
ds.date_updated,
ds.days, 
ds.age, 
sed.name as "event_name", 
se.date_start, 
c.name as "crf_name", 
ec.status_id, 
TRIM('') as "entity_name", 
TRIM('') as "value", 
dn.entity_type, 
dn.description, 
dn.detailed_notes, 
ds.total_notes,
ua.first_name, 
ua.last_name, 
ua.user_name,
ua2.first_name as "owner_first_name", 
ua2.last_name as "owner_last_name", 
ua2.user_name as "owner_user_name"
from
discrepancy_note dn left outer join user_account ua on (
    dn.assigned_user_id = ua.user_id
), user_account ua2, dn_event_crf_map map, event_crf ec, study_event se, study_subject ss, study s, study_event_definition sed, crf_version cv, crf c, view_study_hidden_event_definition_crf vhstudy, view_site_hidden_event_definition_crf vhsite, view_dn_stats ds
where
dn.entity_type = 'eventCrf'
and dn.discrepancy_note_id = ua2.user_id
and map.discrepancy_note_id = dn.discrepancy_note_id
and map.event_crf_id = ec.event_crf_id
and ec.study_event_id = se.study_event_id
and ec.study_subject_id = ss.study_subject_id
and ss.study_id = s.study_id
and dn.discrepancy_note_id = ds.discrepancy_note_id
and se.study_event_definition_id = sed.study_event_definition_id
and ec.crf_version_id = cv.crf_version_id
and cv.crf_id = c.crf_id
and ((dn.parent_dn_id is null) or (dn.parent_dn_id = 0))
and vhstudy.study_event_id = se.study_event_id
and vhstudy.crf_version_id = cv.crf_version_id 
and vhsite.study_event_id = se.study_event_id
and vhsite.crf_version_id = cv.crf_version_id;
]]>
        </sql>
    </changeSet>

     <changeSet author="drodrigues" id="2012-03-28-13351-8" dbms="postgresql">
        <comment>Replacing view_dn_study_event that now depends on new views.</comment>
        <sql splitStatements="false">
<![CDATA[
create or replace view view_dn_study_event as 
select 
s.study_id, 
s.parent_study_id, 
false as "study_hide_crf", 
false as "site_hide_crf",
dn.discrepancy_note_id, 
ss.label, 
ss.status_id as "ss_status_id",
dn.discrepancy_note_type_id, 
dn.resolution_status_id, 
s.unique_identifier as "site_id",
ds.date_created,
ds.date_updated,
ds.days, 
ds.age,
sed.name as "event_name", 
se.date_start,
TRIM('') as "crf_name",
0 as "status_id",
TRIM('') as "entity_name", 
TRIM('') as "value", 
dn.entity_type,
dn.description,
dn.detailed_notes,
ds.total_notes,
ua.first_name, 
ua.last_name, 
ua.user_name,
ua2.first_name as "owner_first_name", 
ua2.last_name as "owner_last_name", 
ua2.user_name as "owner_user_name"
from
discrepancy_note dn left outer join user_account ua on (
    dn.assigned_user_id = ua.user_id
), user_account ua2, dn_study_event_map map, study_event se, study_subject ss, study s, study_event_definition sed, view_dn_stats ds
where
dn.entity_type = 'studyEvent'
and dn.owner_id = ua2.user_id
and map.discrepancy_note_id = dn.discrepancy_note_id
and map.study_event_id = se.study_event_id
and se.study_subject_id = ss.study_subject_id
and ss.study_id = s.study_id
and dn.discrepancy_note_id = ds.discrepancy_note_id
and se.study_event_definition_id = sed.study_event_definition_id
and ((dn.parent_dn_id is null) or (dn.parent_dn_id = 0));
]]>
        </sql>
    </changeSet>

     <changeSet author="drodrigues" id="2012-03-28-13351-9" dbms="postgresql">
        <comment>Replacing view_dn_study_subject that now depends on new views.</comment>
        <sql splitStatements="false">
<![CDATA[
create or replace view view_dn_study_subject as 
select 
s.study_id, 
s.parent_study_id, 
false as "study_hide_crf", 
false as "site_hide_crf",
dn.discrepancy_note_id, 
ss.label, 
ss.status_id as "ss_status_id",
dn.discrepancy_note_type_id, 
dn.resolution_status_id, 
s.unique_identifier as "site_id",
ds.date_created,
ds.date_updated,
ds.days, 
ds.age, 
TRIM('') as "event_name", 
null::date as "date_start",
TRIM('') as "crf_name",
0 as "status_id", 
TRIM('') as "entity_name", 
TRIM('') as "value", 
dn.entity_type,
dn.description, 
dn.detailed_notes,
ds.total_notes,
ua.first_name, 
ua.last_name, 
ua.user_name,
ua2.first_name as "owner_first_name", 
ua2.last_name as "owner_last_name", 
ua2.user_name as "owner_user_name"
from
discrepancy_note dn left outer join user_account ua on (
    dn.assigned_user_id = ua.user_id
), user_account ua2, dn_study_subject_map map, study_subject ss, study s, view_dn_stats ds
where
dn.entity_type = 'studySub'
and dn.owner_id = ua2.user_id
and map.discrepancy_note_id = dn.discrepancy_note_id
and map.study_subject_id = ss.study_subject_id
and ss.study_id = s.study_id
and dn.discrepancy_note_id = ds.discrepancy_note_id
and ((dn.parent_dn_id is null) or (dn.parent_dn_id = 0));
]]>
        </sql>
    </changeSet>

     <changeSet author="drodrigues" id="2012-03-28-13351-10" dbms="postgresql">
        <comment>Replacing view_dn_subject that now depends on new views.</comment>
        <sql splitStatements="false">
<![CDATA[
create or replace view view_dn_subject as 
select 
s.study_id, 
s.parent_study_id, 
false as "study_hide_crf", 
false as "site_hide_crf",
dn.discrepancy_note_id,
ss.label, 
ss.status_id as "ss_status_id",
dn.discrepancy_note_type_id, 
dn.resolution_status_id, 
s.unique_identifier as "site_id",
ds.date_created,
ds.date_updated,
ds.days, 
ds.age, 
TRIM('') as "event_name", 
null::date as "date_start",
TRIM('') as "crf_name", 
0 as "status_id", 
TRIM('') as "entity_name", 
TRIM('') as "value", 
dn.entity_type,
dn.description,
dn.detailed_notes,
ds.total_notes,
ua.first_name, 
ua.last_name, 
ua.user_name,
ua2.first_name as "owner_first_name", 
ua2.last_name as "owner_last_name", 
ua2.user_name as "owner_user_name"
from
discrepancy_note dn left outer join user_account ua on (
    dn.assigned_user_id = ua.user_id
), user_account ua2, dn_subject_map map, study_subject ss, study s, subject su, view_dn_stats ds
where
dn.entity_type = 'subject'
and dn.owner_id = ua2.user_id
and map.discrepancy_note_id = dn.discrepancy_note_id
and map.subject_id = su.subject_id
and ss.subject_id = su.subject_id
and ss.study_id = s.study_id
and dn.discrepancy_note_id = ds.discrepancy_note_id
and ((dn.parent_dn_id is null) or (dn.parent_dn_id = 0));
]]>
        </sql>
    </changeSet>

     <changeSet author="drodrigues" id="2012-03-28-13351-11" dbms="postgresql">
        <comment>Replacing view_discrepancy_note that now depends on new views.</comment>
        <sql splitStatements="false">
<![CDATA[
create or replace view view_discrepancy_note as 
select * from view_dn_item_data
union all
select * from view_dn_event_crf
union all
select * from view_dn_study_event
union all
select * from view_dn_study_subject
union all
select * from view_dn_subject;
]]>
        </sql>
    </changeSet>

     <changeSet author="drodrigues" id="2012-03-28-13351-12" dbms="postgresql">
        <comment>Fixed the invertion of "days" and "age" calculation in 'view_dn_stats'.</comment>
        <sql splitStatements="false">
<![CDATA[
create or replace view "view_dn_stats" as select 
dn.discrepancy_note_id, 
case
    when dn.resolution_status_id = 1 or dn.resolution_status_id = 2 or dn.resolution_status_id = 3 then (current_date - totals.date_updated)
    else null
end as "days",
case 
    when dn.resolution_status_id = 1 or dn.resolution_status_id = 2 or dn.resolution_status_id = 3 then (current_date - dn.date_created)
    when dn.resolution_status_id = 4 then (totals.date_updated - dn.date_created)
    else null
end as "age",
totals.total_notes,
dn.date_created,
totals.date_updated
from discrepancy_note dn,
(
    select dn1.parent_dn_id, max(dn1.date_created) as "date_updated", count(dn1.discrepancy_note_id) as "total_notes" from discrepancy_note dn1 group by dn1.parent_dn_id
) as "totals"
where 
(dn.parent_dn_id is null or dn.parent_dn_id = 0)
and dn.discrepancy_note_id = totals.parent_dn_id;
]]>
        </sql>
    </changeSet>
    

</databaseChangeLog>     