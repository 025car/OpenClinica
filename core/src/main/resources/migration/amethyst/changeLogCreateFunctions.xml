<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9 http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">
  <changeSet author="pgawade (generated)" id="2011-04-22-9165-1" runOnChange="true">
    	<preConditions onFail="MARK_RAN">
	 	<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>
	
    <!-- JN: Disabling the audit log on status change. -->
    	 <sql splitStatements="false">
    	 	CREATE OR REPLACE FUNCTION item_data_trigger() RETURNS "trigger"
		    AS 'DECLARE
			pk INTEGER;
			entity_name_value TEXT;
			std_evnt_id INTEGER;
			crf_version_id INTEGER;
		BEGIN
			IF (TG_OP = ''DELETE'') THEN
				/*---------------*/
				 /*Item data deleted (by deleting an event crf)*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = OLD.item_id;
		        SELECT INTO std_evnt_id ec.study_event_id FROM event_crf ec WHERE ec.event_crf_id = OLD.event_crf_id;
		        SELECT INTO crf_version_id ec.crf_version_id FROM event_crf ec WHERE ec.event_crf_id = OLD.event_crf_id;
		        INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, event_crf_id, study_event_id, event_crf_version_id)
		                VALUES (pk, ''13'', now(), OLD.update_id, ''item_data'', OLD.item_data_id, entity_name_value, OLD.value, OLD.event_crf_id, std_evnt_id, crf_version_id);
				RETURN NULL; --return values ignored for ''after'' triggers
			ELSIF (TG_OP = ''UPDATE'') THEN
				IF(OLD.status_id <![CDATA[<>]]> NEW.status_id) THEN
				 /*---------------*/
				 /*Item data status changed (by removing an event crf)*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = NEW.item_id;
				/*---------------*/
				END IF;
		
				IF(OLD.value <![CDATA[<>]]> NEW.value) THEN
				/*---------------*/
				 /*Item data updated*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = NEW.item_id;
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
					VALUES (pk, ''1'', now(), NEW.update_id, ''item_data'', NEW.item_data_id, entity_name_value, OLD.value, NEW.value, NEW.event_crf_id);
				/*---------------*/
				END IF;
				RETURN NULL;  /*return values ignored for ''after'' triggers*/
			END IF;
		RETURN NULL;  /*return values ignored for ''after'' triggers*/
		END;
		'
		    LANGUAGE plpgsql;
    	 </sql>
    </changeSet>
    <!-- JN: Disabling the audit log on status change. -->
    <changeSet author="pgawade (generated)" id="2011-04-22-9165-2">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>
		<sql splitStatements="false">
			CREATE OR REPLACE package body clinica_table_api is
				procedure item_data_trigger(
		      tg_op varchar2
		     ,newrec in out item_data%rowtype
		     ,oldrec item_data%rowtype default null
		   ) is
		event_type_id    varchar2(10) := null;
		entity_name_value varchar2(200);
		std_evnt_id INTEGER;
		crf_version_id INTEGER;
		luser_id  audit_log_event.user_id%type;
		/* -- */
		BEGIN
		    /* -- */
		    IF (TG_OP = 'DELETE') THEN
			/* --------------- */
		       /*  --Item data deleted (by deleting an event crf) */
			begin
			  SELECT item.name
			    INTO entity_name_value
			    FROM item
			   WHERE item.item_id = OLDREC.item_id;
			exception
			  when others then
			    entity_name_value := null;
			end;
			/* -- */
			begin
			  SELECT ec.study_event_id
			    INTO std_evnt_id
			    FROM event_crf ec 
			   WHERE ec.event_crf_id = OLDREC.event_crf_id;
			  /* -- */
			exception
			  when others then
			    std_evnt_id := null;
			end;
			/* -- */
			begin
			  SELECT ec.crf_version_id 
			    INTO crf_version_id 
			    FROM event_crf ec
			   WHERE ec.event_crf_id = OLDREC.event_crf_id;
			exception
			  when others then
			    crf_version_id := null;
			end;
			/* -- */
				IF (OLDREC.update_id <![CDATA[<]]>1) THEN
			  luser_id := oldrec.update_id;
			else
			  luser_id := oldrec.owner_id;
			end if;
			/* -- */
		--	INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, event_crf_id,study_event_id,event_crf_version_id)
		--	    VALUES (audit_log_event_audit_id_seq.nextval , '13', sysdate, luser_id, 'item_data', OLDREC.item_data_id, entity_name_value, OLDREC.value, OLDREC.event_crf_id,std_evnt_id,crf_version_id);

			ELSIF (TG_OP = 'UPDATE') THEN
			IF nvl(OLDREC.status_id, '-1') <![CDATA[<>]]> nvl(NEWREC.status_id, '-1') THEN
			/* --------------- */
			/* --Item data status changed (by removing an event crf)*/
			begin
			  SELECT item.name
			    INTO entity_name_value
			    FROM item
			   WHERE item.item_id = NEWREC.item_id;
			exception
			  when others then
			    entity_name_value := null;
			end;
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
			    VALUES (audit_log_event_audit_id_seq.nextval , '12', sysdate, NEWREC.update_id, 'item_data', NEWREC.item_data_id, entity_name_value, OLDREC.status_id, NEWREC.status_id, NEWREC.event_crf_id);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.value, ' ') <![CDATA[<>]]> nvl(NEWREC.value, ' ')) THEN
			/* --------------- */
			/* --Item data updated */
			begin
			  SELECT item.name
			    INTO entity_name_value
			    FROM item
			   WHERE item.item_id = NEWREC.item_id;
			exception
			  when others then
			    entity_name_value := null;
			end;
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
			    VALUES (audit_log_event_audit_id_seq.nextval , '1', sysdate, NEWREC.update_id, 'item_data', NEWREC.item_data_id, entity_name_value, OLDREC.value, NEWREC.value, NEWREC.event_crf_id);
			/* --------------- */
			END IF;
		    END IF;
		END;
		/* -------------------------------------------------------------------------------- */
			
		
		</sql>
		</changeSet>
		
</databaseChangeLog>
